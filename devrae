#!/usr/local/bin/python3
#!/usr/bin/python3
import os
import sys
import re
import logging, sys
import json
import requests
from pathlib import Path

logging.basicConfig(stream=sys.stderr, level=logging.INFO)

commands = [
    'init',
    'compile',
    'deploy',
    'get-ids'
]

if len(sys.argv) < 2 or not sys.argv[1] in commands:
    raise Exception('Usage: devrae <init|compile|deploy|get-ids>')



def main(command):
    if command == 'init':
        _do_init()

    if command == 'compile':
        logging.info('>> Compiling...')
        _do_compile()

    if command == 'deploy':
        logging.info('>> Deploying...')
        _do_deploy()

    if command == 'get-ids':
        if len(sys.argv) < 3:
            raise Exception('Usage: devrae get-ids <collection id>')
        logging.info('>> Retrieving IDs from collection...')
        _do_get_ids(sys.argv[2])

def _do_init():
    cwd = os.getcwd()
    logging.info(">> Creating work folders and sample configuration file...")
    os.makedirs(os.path.join(cwd, 'aliases'), exist_ok = True)
    logging.info(">> aliases OK")
    os.makedirs(os.path.join(cwd, 'functions'), exist_ok = True)
    logging.info(">> functions OK")
    os.makedirs(os.path.join(cwd, 'gvars'), exist_ok = True)
    logging.info(">> gvars OK")
    os.makedirs(os.path.join(cwd, 'config'), exist_ok = True)
    logging.info(">> config OK")
    f = open(os.path.join(cwd, 'config', 'avrae-ids.json'), 'w')
    template = ('{\n'
            '    "aliases": {\n'
            '        "aliasName": "aliasId"\n'
            '    },\n'
            '    "gvars": {\n'
            '        "gvarName": "gvarId"\n'
            '    }\n'
            '}'
            )
    f.write(template)
    f.close()

def _do_compile():
    cwd = os.getcwd()

    os.makedirs(os.path.join(cwd, 'out'), exist_ok = True)

    aliases_dir = os.path.join(cwd, 'aliases')
    functions_dir = os.path.join(cwd, 'functions')

    aliases = _find_files_recursively(aliases_dir, '.alias')
    functions = _find_files_recursively(functions_dir, '.func')

    for alias in aliases:
        logging.info(f'>> Compiling alias "{alias}"')
        alias_output = _do_compile_alias(alias, functions)
        logging.debug(f'>> alias output: {alias_output}')
        logging.info(f'>> Finished compiling alias "{alias}"')

        _write_compiled_alias(str(alias), alias_output)

    logging.info(">> Compiled files added to the 'out' folder.")

def _write_compiled_alias(alias_path, compiled_output):
    cwd = os.getcwd()
    aliases_folder = os.path.join(cwd, 'aliases')

    if len(sys.argv) > 2 and sys.argv[2].strip() == '-ow':
        output_folder = aliases_folder
    else:
        output_folder = os.path.join(cwd, 'out')

    output_path = alias_path.replace(aliases_folder, output_folder)
    logging.debug(f'Writing compiled alias to {output_path}')
    os.makedirs(os.path.dirname(output_path), exist_ok = True)
    f = open(output_path, 'w')
    f.write(compiled_output)
    f.close()

def _do_strip_compiled_code(alias_path):
    stripped_content = ''
    current_index = 0
    with open(alias_path) as f:
        alias_content = f.read()
        header_re = '##### devrae function insert'
        footer_re = '##### devrae function end'

        matches = re.finditer(header_re, alias_content)
        for match in matches:
            function_start_index = alias_content.rindex('\n', current_index, match.start())
            stripped_content += alias_content[current_index:function_start_index]
            function_end_index = alias_content.index(footer_re, current_index)
            next_line_after_function_end = alias_content.index('\n', function_end_index)
            current_index = next_line_after_function_end
        stripped_content += alias_content[current_index:len(alias_content)]

    return stripped_content

def _do_compile_alias(alias_path, function_files):
    new_content = ''
    current_index = 0
    alias_content = _do_strip_compiled_code(alias_path)

    # Regex for Devrae function call. Format:
    # #! devrae_f <function name> (#P <parameter 1> #P <parameter 2, etc>) !#
    f_re = '\n(([ \t]*)*)#![ \t]*(([a-zA-Z_][a-zA-Z_\d]*)[ \t]*=[ \t]*)?devrae_f[ \t]*([a-zA-Z_][a-zA-Z_\d]*)[ \t]*(\(.*)!#'

    matches = re.finditer(f_re, alias_content)
    for match in matches:
        start_index = match.start()
        end_index = match.end()
        indent = match.group(1) if match.group(1) else ''
        return_var = match.group(4)
        function_name = match.group(5)
        params_str = match.group(6).strip()
        params_str = params_str[1:len(params_str) - 1].strip()

        logging.debug(f'>> injecting function {function_name} in alias {alias_path}')

        function_content = _read_function_content(function_name)

        new_content += alias_content[current_index:end_index]
        new_content += "\n" + indent + f'##### devrae function insert [{function_name}] #####' + "\n"

        return_var = return_var.strip() if return_var != None and len(return_var.strip()) > 0 else None

        if return_var != None:
            new_content += f'{indent}{return_var} = None' + '\n'

        params = params_str.split('#P')[1:]
        for p_index in range(len(params)):
            param = params[p_index].strip()
            if len(param) != 0:
                new_content += f'{indent}__p{p_index}__ = {param}' + "\n"

        for line in function_content:
            new_content += indent + line

        if return_var != None:
            new_content += f'{indent}{return_var} = __result__'

        new_content += "\n" + indent + f'##### devrae function end [{function_name}] #####'
        current_index = end_index

    new_content += alias_content[current_index:len(alias_content)]

    return new_content

def _read_function_content(function_name):
    cwd = os.getcwd()
    function_dir = os.path.join(cwd, 'functions')
    function_file = os.path.join(function_dir, function_name + ".func")
    return _read_file_as_string_list(function_file)

def _read_file_as_string_list(file_path):
    content = ''
    with open(file_path) as f:
        content = f.readlines()
    return content

def _read_file_as_single_string(file_path):
    content = ''
    with open(file_path) as f:
        content = f.read()
    return content


def _find_files_recursively(root, extension):
    files = []
    for path in Path(root).rglob(f'*{extension}'):
        files.append(path)
    return files

def _do_deploy():
    cwd = os.getcwd()
    config_file = os.path.join(cwd, 'config', 'avrae-ids.json')
    config_txt = _read_file_as_single_string(config_file)
    config = json.loads(config_txt)

    out_folder = os.path.join(cwd, 'out')
    all_aliases = _find_files_recursively(out_folder, '.alias')

    gvars_folder = os.path.join(cwd, 'gvars')
    all_gvars = _find_files_recursively(gvars_folder, '.gvar')

    avrae_token = os.environ.get("AVRAE_TOKEN")
    logging.debug(f'AVRAE TOKEN: {avrae_token}')

    # deployment code credits to Turtle https://github.com/1drturtle
    for gvar in all_gvars:
        with open(gvar, 'r') as f:
            code = f.read()
            data_post = {
                "value": code
            }

            gvar_name = os.path.basename(f.name).split('.')[0]
            gvar_id = config["gvars"][gvar_name]

            # Make Requests
            auth = {'Authorization': avrae_token}
            request = f'https://api.avrae.io/customizations/gvars/{gvar_id}'
            print('POST Request Sent to ' + request)
            # POST New Alias Code
            post_result = requests.post(url=request,
                                        json=data_post,
                                        headers=auth
                                        )
            print(f'Result for ID {gvar_id}: {post_result.text}')

    for alias in all_aliases:
        with open(alias, 'r') as f:
            code = f.read()
            data_post = {
                "content": code
            }

            alias_name = os.path.basename(f.name).split('.')[0]
            if not alias_name in config["aliases"]:
                logging.info(f"Configuration for alias {alias_name} not found. Skipping...")
            else:
                # Make Requests
                auth = {'Authorization': avrae_token}
                root_request_url = 'https://api.avrae.io/workshop/alias/{}/'
                post_url = (root_request_url + 'code').format(config["aliases"][alias_name])
                print('POST Request Sent to ' + post_url)
                # POST New Alias Code
                post_result = requests.post(url=post_url,
                                            json=data_post,
                                            headers=auth
                                            ).json()

                if not post_result["success"]:
                    logging.info(f'There was an error communicatin with Avrae: {post_result["error"]}')
                    sys.exit(1)

                # PUT new alias code as active
                data_put = {
                    'version': post_result['data']['version']
                }
                put_url = (root_request_url + 'active-code').format(config["aliases"][alias_name])
                print('PUT Request Sent to '+put_url)
                put_result = requests.put(url=put_url,
                                          json=data_put,
                                          headers=auth
                                          ).json()
                print(f'Result for {alias_name} (Version #{data_put["version"]}) - '
                      f'POST Result: {post_result["success"]} '
                      f'PUT Result: {put_result["success"]}')

def _print_subaliases(alias, parent):
    parent = parent
    for subalias in alias['subcommands']:
        print(f'Sub-Alias !{" ".join(parent)} {subalias["name"]} found, ID: {subalias["_id"]}')
        this_parent = parent + [subalias['name']]
        _print_subaliases(subalias, this_parent)

def _do_get_ids(collection_id):
    logging.info('Finding Aliases and Snippets.')

    collection = requests.get(url=f'https://api.avrae.io/workshop/collection/{collection_id}/full')
    collection = collection.json()

    if collection['success']:
        collection = collection['data']
        for alias in collection['aliases']:
            logging.info(f"Alias !{alias['name']} found, ID: {alias['_id']}")
            subaliases = alias['subcommands']
            _print_subaliases(alias, [alias["name"]])
        for snippet in collection['snippets']:
            logging.info(f"Snippet !{snippet['name']} found, ID: {snippet['_id']}")

    else:
        return logging.info('Error in Collection: ', collection)

if __name__ == '__main__':
    main(sys.argv[1])
